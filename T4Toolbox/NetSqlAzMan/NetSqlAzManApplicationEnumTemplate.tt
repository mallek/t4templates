<#+
// <copyright file="NetSqlAzManApplicationEnumTemplate.tt" company="T4 Toolbox Team">
//  Copyright © T4 Toolbox Team. All Rights Reserved.
// </copyright>

public class NetSqlAzManApplicationEnumTemplate : Template
{
	private string @namespace = string.Empty;
	private NetSqlAzMan.Interfaces.IAzManApplication application = null;

	/// <summary>
	/// Gets or sets the application for which the enumeration will be generated
	/// </summary>
	/// <remarks>
	/// This property is automatically assigned by <see cref="NetSqlAzManWrapperGenerator"/>. You
	/// must assign this property manually if you are using this template separately.
	/// </remarks>	
	public NetSqlAzMan.Interfaces.IAzManApplication Application
	{
		get { return this.application; }
		set { this.application = value; }
	}

	/// <summary>
	/// Gets or sets the namespace in which the enumeration will be generated.
	/// </summary>
	/// <remarks>
	/// This property is automatically assigned by <see cref="AzManWrapperGenerator"/>. You
	/// must assign this property manually if you are using this template separately.
	/// </remarks>
	public string Namespace
	{
		get { return this.@namespace; }
		set { this.@namespace = value; }
	}

	/// <summary>
	/// Generates actual code for the application enumeration.
	/// </summary>
	protected override void RenderCore()
	{
#>
// <autogenerated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(TransformationContext.Host.TemplateFile) #>. 
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace <#= this.Namespace #>
{
	/// <summary>
	/// <#= this.Application.Description #>
	/// </summary>
	public enum <#= NetSqlAzManWrapperGenerator.GetApplicationEnumName(this.Application.Name) #>
	{
<#+
		NetSqlAzMan.Interfaces.IAzManItem[] operations = this.Application.GetItems(NetSqlAzMan.Interfaces.ItemType.Operation);

		int i = 0;
		int operationCount = operations.Length;
	    foreach (NetSqlAzMan.Interfaces.IAzManItem operation in operations)
	    {
            try
            {
#>

		/// <summary>
		/// <#= operation.Description #>
		/// </summary>
		<#= NetSqlAzManWrapperGenerator.GetValidName(operation.Name) #> = <#= i++ #><#+ this.WriteSeparator(i, operationCount); #>
<#+
			}
			finally
			{
//				System.Runtime.InteropServices.Marshal.FinalReleaseComObject(operation);
			}
	    }
#>
	}
}
<#+
	}

	/// <summary>
	/// Validates code generation parameters.
	/// </summary>
    protected override void Validate()
    {
		if (this.Application == null)
		{
			throw new TransformationException("Application property must be assigned");
		}

		if (string.IsNullOrEmpty(this.Namespace))
		{
            throw new TransformationException("Namespace property must be assigned");
		}
    }

	/// <summary>
	/// Writes a coma to separate enumerated items, if necessary.
	/// </summary>
	private void WriteSeparator(int currentIndex, int count)
	{
		if (currentIndex < count)
			this.WriteLine(",");
		else
			this.WriteLine(string.Empty);
	}
}
#>
