<#@ assembly name="EnvDTE" #>
<#+
// <copyright file="EnumSqlView.tt" company="T4 Toolbox Team">
//   Copyright © T4 Toolbox Team. All Rights Reserved.
// </copyright>

public class EnumSqlViewTemplate: Template
{
	private string enumFileName;
	private string schemaName = "enum";

	#region Template Parameters

	/// <summary>
	/// Gets or sets the name of a C# source file that contains enumeration.
	/// </summary>
	/// <remarks>
	/// This parameter is required. Supports relative paths.
	/// </remarks>
	public string EnumFileName 
	{ 
		get { return this.enumFileName; }
		set { this.enumFileName = value; }
	}

	/// <summary>
	/// Gets or sets the name of SQL schema in which view will be generated.
	/// </summary>
	/// <remarks>
	/// This parameter is optional. Default value is "enum".
	/// </remarks>
	public string SchemaName
	{
		get { return this.schemaName; }
		set { this.schemaName = value; }
	}

	#endregion

	/// <summary>
	/// Generates SQL script
	/// </summary>
	protected override void RenderCore()
	{
		EnvDTE.CodeEnum @enum = GetEnum();
#>
-- <autogenerated> 
--   This file was generated using T4 template <#= System.IO.Path.GetFileName(TransformationContext.Host.TemplateFile) #>.
--   Any changes made to this file manually will be lost next time the file is regenerated.
-- </autogenerated>

-- Create enumeration schema if it doesn't already exist
if  not exists (select * from sys.schemas where name = N'<#= this.SchemaName #>')
	exec('create schema [<#= this.SchemaName #>]')
go

-- Delete enumeration view if it already exists
if  exists (select * from sys.views where object_id = object_id(N'[<#= this.SchemaName #>].[<#= @enum.Name #>]'))
	drop view [<#= this.SchemaName #>].[<#= @enum.Name #>]
go

-- The following view encapsulates values defined in <#= @enum.Name #> enumeration
-- Use this view instead of hard-coding these values in your T-SQL scripts
create view [<#= this.SchemaName #>].[<#= @enum.Name #>] 
as
	select 
<#+
		PushIndent("		");
		int lastValue = 0;
		int lastIndex = 0;
		foreach (EnvDTE.CodeElement element in @enum.Children)
		{
			EnvDTE.CodeVariable variable = element as EnvDTE.CodeVariable;
			if (variable != null)
			{
				if (lastIndex > 0)
				{
					WriteLine(",");
				}

				if (variable.InitExpression != null)
				{
					string value = (string)variable.InitExpression;
					Write(value);
					int.TryParse(value, out lastValue);
				}
				else
				{
					Write(lastValue.ToString());
				}

				Write(" as " + variable.Name);

				lastValue++;
				lastIndex++;
			}
		}
		PopIndent();
		WriteLine(string.Empty);
#>
go
<#+
	}

	/// <summary>
	/// Validates template parameters.
	/// </summary>
	protected override void Validate()
	{
		if (string.IsNullOrEmpty(this.EnumFileName))
		{
			throw new TransformationException("EnumFileName property must be assigned");
		}

		try
		{
			this.EnumFileName = TransformationContext.Host.ResolvePath(this.EnumFileName);
		}
		catch (System.IO.FileNotFoundException e)
		{
			throw new TransformationException(
				string.Format("Cannot find file specified in EnumFileName property: {0}", e.FileName),
				e);
		}

		if (string.IsNullOrEmpty(this.SchemaName))
		{
			throw new TransformationException("SchemaName property must be assigned");
		}
	}

	/// <summary>
	/// Returns <see cref="EnvDTE.CodeEnum"/> object that represents the enumeration 
	/// defined in the file with the specified name.
	/// </summary>
	private EnvDTE.CodeEnum GetEnum()
	{
		EnvDTE.ProjectItem enumProjectItem = TransformationContext.FindProjectItem(this.EnumFileName);

		EnvDTE.FileCodeModel codeModel = enumProjectItem.FileCodeModel;
		if (codeModel == null)
		{
			throw new TransformationException(
				string.Format(
					"Unable to retrieve code model for '{0}'. Make sure it is being compiled by Visual Studio.", 
					this.EnumFileName));
		}

		EnvDTE.CodeEnum @enum = FindEnum(codeModel.CodeElements);
		if (@enum == null)
		{
			throw new TransformationException("Could not find an enum declaration in " + this.EnumFileName);
		}

		return @enum;
	}

	/// <summary>
	/// Traverses the specified collection of <see cref="EnvDTE.CodeElements"/> recursively and returns
	/// the first enumeration it finds.
	/// </summary>
	private EnvDTE.CodeEnum FindEnum(EnvDTE.CodeElements elements)
	{
		foreach (EnvDTE.CodeElement element in elements)
		{
			EnvDTE.CodeEnum @enum = element as EnvDTE.CodeEnum;
			if (@enum != null)
			{
				return @enum;
			}

			@enum = FindEnum(element.Children);
			if (@enum != null)
			{
				return @enum;
			}
		}
		return null;
	}
}
#>