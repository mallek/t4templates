<#+
// <copyright file="SubSonicRepository.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class SubSonicRepository : Template
{
    private string _Namespace;
	
    public string Namespace
    {
        get { return _Namespace; }
        set { _Namespace = value; }
    }
	
	protected override void RenderCore()
	{
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SubSonic.DataProviders;
using SubSonic.Linq;
using SubSonic;
using System.Collections;
using SubSonic.Schema;
using SubSonic.Extensions;
using SubSonic.Query;
using System.Linq.Expressions;
using System.Transactions;
using SubSonic.Linq.Structure;

namespace <#=this.Namespace #> {
    
    /// <summary>
    /// A Repository class which wraps the <#=DatabaseManager.DatabaseName #> Database
    /// </summary>
    public class <#=DatabaseManager.DatabaseName #>Repository<T>:IRepository<T> where T:new() {
        
        IQuerySurface _db;
        public <#=DatabaseManager.DatabaseName #>Repository(IQuerySurface db) {
            _db = db;
        }
        public <#=DatabaseManager.DatabaseName #>Repository() {
            _db = DB.CreateDB();
        }

        #region ' IRepository<T> Members '

		/// <summary>
		/// Returns all T items from the  <#=DatabaseManager.DatabaseName #> Database
		/// </summary>
        public IQueryable<T> GetAll() {
            return _db.GetQuery<T>();
        }

 		/// <summary>
		/// Returns a server-side Paged List from the  <#=DatabaseManager.DatabaseName #> Database
		/// </summary>
        public System.Collections.PagedList<T> GetPaged(int pageIndex, int pageSize) {
            return new PagedList<T>(_db.GetQuery<T>(), pageIndex, pageSize);
        }

  		/// <summary>
		/// Returns an IQueryable  based on the passed-in Expression  <#=DatabaseManager.DatabaseName #> Database
		/// </summary>
        public IQueryable<T> Find(System.Linq.Expressions.Expression<Func<T, bool>> expression) {
            return GetAll().Where(expression);
        }

        ISqlQuery BuildUpdateQuery(T item){
            ITable tbl = _db.FindTable(typeof(T).Name);
            Update<T> query = new Update<T>(_db.Provider);
            int result = 0;
            if (tbl != null) {
                var settings = item.ToDictionary();

                foreach (string key in settings.Keys) {
                    IColumn col = tbl.GetColumn(key);
                    if (col.IsPrimaryKey) {
                        Constraint c = new Constraint(ConstraintType.Where, col.Name);
                        c.ParameterValue = settings[col.Name];
                        c.ParameterName = col.Name;
                        c.ConstructionFragment = col.Name;
                        query.Constraints.Add(c);

                    }
                    else {
                        query.Set(col.Name).EqualTo(settings[key]);
                    }
                }

                if (query.Constraints.Count == 0) {
                    query.Constraints = item.ToConstraintList();
                }
            }
            return query;
        }

        ISqlQuery BuildInsertQuery(T item) {
            ITable tbl = _db.FindTable(typeof(T).Name);
            Insert query = null;
            if (tbl != null) {
                var hashed = item.ToDictionary();
                query = new Insert(_db.Provider).Into<T>(tbl); ;
                foreach (string key in hashed.Keys) {
                    IColumn col = tbl.GetColumn(key);
                    if (!col.IsPrimaryKey) {
                        query.Value(key, hashed[key]);
                    }
                }
            }
            return query;
        }

        ISqlQuery BuildDeleteQuery(T item) {
            ITable tbl = _db.FindTable(typeof(T).Name);
            int result = 0;
            var query = new Delete<T>(_db.Provider);
            if (tbl != null) {
                IColumn pk = tbl.PrimaryKey;
                var settings = item.ToDictionary();
                if (pk != null) {
                    Constraint c = new Constraint(ConstraintType.Where, pk.Name);
                    c.ParameterValue = settings[pk.Name];
                    c.ParameterName = pk.Name;
                    c.ConstructionFragment = pk.Name;
                    query.Constraints.Add(c);
                }
                else {
                    query.Constraints = item.ToConstraintList();
                }
            }
            return query;
        }

  		/// <summary>
		/// Adds a T item to the <#=DatabaseManager.DatabaseName #> Database
		/// </summary>
        public void Add(T item) {
            var query = BuildInsertQuery(item);
            if (query != null)
                query.Execute();
        }


        /// <summary>
        /// Adds a bunch of T items to the <#=DatabaseManager.DatabaseName #> Database
        ///</summary>
        public void Add(IEnumerable<T> items)
        {
			BatchQuery bQuery = new BatchQuery(_db.Provider);
			foreach(T item in items)
			{
				var query=BuildInsertQuery(item);
				bQuery.Queue(query);
			}
			bQuery.Execute();
        }


   		/// <summary>
		/// Updates the passed-in T item in the <#=DatabaseManager.DatabaseName #> Database
		/// </summary>
        public int Update(T item) {
            int result = 0;
            var query = BuildUpdateQuery(item);
            if (query != null)
                result = query.Execute();
            return result;
        }
        
        /// <summary>
        /// Updates the passed-in T items in the <#=DatabaseManager.DatabaseName #> Database
        /// </summary>
        public int Update(IEnumerable<T> items) {
            BatchQuery bQuery = new BatchQuery(_db.Provider);
            int result = 0;

            foreach (T item in items) {
                var query = BuildUpdateQuery(item);
                bQuery.Queue(query);
            }
            result = bQuery.Execute();
            return result;
        }

        /// <summary>
        /// Deletes the passed-in T items in the <#=DatabaseManager.DatabaseName #> Database
        /// </summary>
        public int Delete(IEnumerable<T> items) {
            BatchQuery bQuery = new BatchQuery(_db.Provider);
            int result = 0;

            foreach (T item in items) {
                var query = BuildUpdateQuery(item);
                if(query!=null)
                    bQuery.Queue(query);
            }
            result = bQuery.Execute();
            return result;
        }
      
   		/// <summary>
		/// Deletes the passed-in T item from the <#=DatabaseManager.DatabaseName #> Database
		/// </summary>
        public int Delete(T item) {
            int result = 0;
            var query = BuildDeleteQuery(item);
            if (query != null) {
                result=query.Execute();
            }
            return result;
        }
   		/// <summary>
		/// Deletes the T item from the <#=DatabaseManager.DatabaseName #> Database by Primary Key
		/// </summary>
        public int Delete(object key) {
            ITable tbl = _db.FindTable(typeof(T).Name);
            int result = 0;
            if (tbl != null) {
                result = new Delete<T>(_db.Provider).Where(tbl.PrimaryKey.Name).IsEqualTo(key).Execute();
            }
            return result;
        }

   		/// <summary>
		/// Deletes 0 to n T items from the <#=DatabaseManager.DatabaseName #> Database based on the passed-in Expression
		/// </summary>
        public int Delete(Expression<Func<T, bool>> expression) {
            return _db.Delete(expression).Execute();
        }

        #endregion
    }
}
<#+
	}
}
#>
