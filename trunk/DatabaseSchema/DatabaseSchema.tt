<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#+
// <copyright file="DatabaseSchema.tt" company="George J. Capnias">
//
//  The contents of this file are subject to the Mozilla Public
//  License Version 1.1 (the "License"); you may not use this file
//  except in compliance with the License. You may obtain a copy of
//  the License at http://www.mozilla.org/MPL/
//
//  Software distributed under the License is distributed on an 
//  "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  rights and limitations under the License.
//
// </copyright>

    public class DatabaseSchema
    {
        private string _ConnectionString;
        private string _ProviderName;
        private string _DatabaseName;
        private DataTable _MetadataCollection = null;
        private Dictionary<string, DataTable> Cache = new Dictionary<string, DataTable>();

        #region ' Properties '

        public string ConnectionString
        {
            get { return _ConnectionString; }
        }

        public string ProviderName
        {
            get { return _ProviderName; }
        }

        public string DatabaseName
        {
            get { return _DatabaseName; }
        }

        private DataTable MetadataCollection
        {
            get
            {
                if (_MetadataCollection == null)
                {
                    using (DbConnection conn = GetDBConnection())
                    {
                        _MetadataCollection = conn.GetSchema("MetaDataCollections");
                    }
                }
                return _MetadataCollection;
            }
        }

        #endregion

        private DatabaseSchema() { }

        public DatabaseSchema(string ConnectionString, string ProviderName, string DatabaseName)
        {
            _ConnectionString = ConnectionString;
            _ProviderName = ProviderName;
            _DatabaseName = DatabaseName;
        }

        #region ' Methods '

        private bool SupportsMetadataCollection(string metacollection)
        {
            bool supports = false;
            switch (this.ProviderName)
            {
                case "System.Data.SqlServerCe.3.5":
                case "System.Data.SqlServerCe":
                    supports = false;
                    break;

                default:
                    foreach (DataRow metacollectionRow in this.MetadataCollection.Rows)
                    {
                        if (metacollectionRow["CollectionName"].ToString() == metacollection)
                        {
                            supports = true;
                            break;
                        }
                    }
                    break;
            }

            return supports;
        }

        private DataTable GetSchema(string metaCollection)
        {
            return this.GetSchema(metaCollection, new string[4]);
        }

        private DataTable GetSchema(string metaCollection, string[] restrictions)
        {
            DataTable tbl = null;
            using (DbConnection conn = this.GetDBConnection())
            {
                tbl = conn.GetSchema(metaCollection, restrictions);
            }
            return tbl;
        }

        private DbConnection GetDBConnection()
        {
            DbProviderFactory providerFactory = DbProviderFactories.GetFactory(this.ProviderName);
            DbConnection conn = providerFactory.CreateConnection();
            conn.ConnectionString = this.ConnectionString;
            conn.Open();
            return conn;
        }

        public DataTable GetTables()
        {
            if (Cache.Keys.Contains("Tables"))
                return Cache["Tables"];

            DataTable tbl = new DataTable("Tables");
            switch (this.ProviderName)
            {
                case "System.Data.SqlServerCe.3.5":
                case "System.Data.SqlServerCe":
                    tbl.Columns.Add("TABLE_CATALOG", typeof(System.String));
                    tbl.Columns.Add("TABLE_SCHEMA", typeof(System.String));
                    tbl.Columns.Add("TABLE_NAME", typeof(System.String));
                    tbl.Columns.Add("TABLE_TYPE", typeof(System.String));
                    tbl.Columns.Add("TABLE_GUID", typeof(System.Guid));
                    tbl.Columns.Add("DESCRIPTION", typeof(System.String));
                    tbl.Columns.Add("TABLE_PROPID", typeof(System.Int32));
                    tbl.Columns.Add("DATE_CREATED", typeof(System.DateTime));
                    tbl.Columns.Add("DATE_MODIFIED", typeof(System.DateTime));

                    using (DbConnection conn = this.GetDBConnection())
                    {
                        DbCommand cmd = conn.CreateCommand();
                        cmd.CommandText = tblSQLCE;
                        cmd.CommandType = CommandType.Text;
                        DbDataReader results = cmd.ExecuteReader();
                        while (results.Read())
                        {
                            DataRow valuesRow = tbl.NewRow();
                            if (results[0] != DBNull.Value)
                                valuesRow[0] = results.GetString(0);
                            if (results[1] != DBNull.Value)
                                valuesRow[1] = results.GetString(1);
                            if (results[2] != DBNull.Value)
                                valuesRow[2] = results.GetString(2);
                            if (results[3] != DBNull.Value)
                                valuesRow[3] = results.GetString(3);
                            if (results[5] != DBNull.Value)
                                valuesRow[5] = results.GetString(5);
                            if (results[7] != DBNull.Value)
                                valuesRow[7] = results.GetDateTime(7);
                            if (results[8] != DBNull.Value)
                                valuesRow[8] = results.GetDateTime(8);
                            tbl.Rows.Add(valuesRow);
                        }
                        results.Close();
                    }
                    break;

                default:
                    tbl = this.GetSchema("Tables");
                    break;
            }

            Cache.Add("Tables", tbl);
            return tbl;
        }

        public DataTable GetTableColumns(string tableSchema, string tableName)
        {
            string CacheKey = "Columns:" + (string.IsNullOrEmpty(tableSchema) ? tableName : tableSchema + "." + tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = new DataTable();
            using (DbConnection conn = this.GetDBConnection())
            {
                DbCommand cmd = conn.CreateCommand();
                switch (this.ProviderName)
                {
                    case "System.Data.SqlServerCe.3.5":
                    case "System.Data.SqlServerCe":
                    case "System.Data.SqlClient":
                        if (!string.IsNullOrEmpty(tableSchema))
                            cmd.CommandText = string.Format("SELECT * FROM [{0}].[{1}]", tableSchema, tableName);
                        else
                            cmd.CommandText = string.Format("SELECT * FROM [{0}]", tableName);

                        cmd.CommandType = CommandType.Text;
                        tbl = cmd.ExecuteReader(CommandBehavior.KeyInfo).GetSchemaTable();
                        break;

                    case "MySql.Data.MySqlClient":
                        if (!string.IsNullOrEmpty(tableSchema))
                            cmd.CommandText = string.Format("SELECT * FROM `{0}`.`{1}`", tableSchema, tableName);
                        else
                            cmd.CommandText = string.Format("SELECT * FROM `{0}`", tableName);

                        cmd.CommandType = CommandType.Text;
                        tbl = cmd.ExecuteReader(CommandBehavior.KeyInfo).GetSchemaTable();
                        break;

                    default:
                        throw new NotImplementedException("The provider '" + this.ProviderName + "' is not implemented!");
                }

            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public string GetTablePrimaryKey(string tableSchema, string tableName)
        {
            DataTable tbl = GetTableColumns(tableSchema, tableName);
            string primarykey = "";
            foreach (DataRow columnRow in tbl.Rows)
            {
                bool isPrimaryKey = false;
                if (columnRow["IsKey"] != DBNull.Value)
                    isPrimaryKey = (bool)columnRow["IsKey"];

                if (isPrimaryKey)
                {
                    primarykey = columnRow["ColumnName"].ToString();
                    break;
                }
            }
            return primarykey;
        }

        public DataTable GetTableForeignKeys(string tableSchema, string tableName)
        {
            string CacheKey = "ForeignKeys:" + (string.IsNullOrEmpty(tableSchema) ? tableName : tableSchema + "." + tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = new DataTable("ForeignKeys");
            string WhereClause;
            if (!string.IsNullOrEmpty(tableSchema))
                WhereClause = string.Format(" WHERE KCUC.TABLE_SCHEMA = '{0}' AND KCUC.TABLE_NAME = '{1}'", tableSchema, tableName);
            else
                WhereClause = string.Format(" WHERE KCUC.TABLE_NAME = '{0}'", tableName);

            using (DbConnection conn = this.GetDBConnection())
            {
                DbCommand cmd = conn.CreateCommand();

                switch (this.ProviderName)
                {
                    case "System.Data.SqlServerCe.3.5":
                    case "System.Data.SqlServerCe":
                        tbl.Columns.Add("FK_TABLE_CATALOG", typeof(System.String));
                        tbl.Columns.Add("FK_TABLE_SCHEMA", typeof(System.String));
                        tbl.Columns.Add("FK_TABLE_NAME", typeof(System.String));
                        tbl.Columns.Add("FK_COLUMN_NAME", typeof(System.String));
                        tbl.Columns.Add("FK_ORDINAL_POSITION", typeof(System.Int32));
                        tbl.Columns.Add("FK_NAME", typeof(System.String));
                        tbl.Columns.Add("PK_TABLE_CATALOG", typeof(System.String));
                        tbl.Columns.Add("PK_TABLE_SCHEMA", typeof(System.String));
                        tbl.Columns.Add("PK_TABLE_NAME", typeof(System.String));
                        tbl.Columns.Add("PK_COLUMN_NAME", typeof(System.String));
                        tbl.Columns.Add("PK_ORDINAL_POSITION", typeof(System.String));
                        tbl.Columns.Add("PK_NAME", typeof(System.String));

                        cmd.CommandText = fkSQLCE + WhereClause;
                        cmd.CommandType = CommandType.Text;
                        DbDataReader results = cmd.ExecuteReader();
                        while (results.Read())
                        {
                            DataRow valuesRow = tbl.NewRow();
                            if (results[0] != DBNull.Value)
                                valuesRow[0] = results.GetString(0);
                            if (results[1] != DBNull.Value)
                                valuesRow[1] = results.GetString(1);
                            if (results[2] != DBNull.Value)
                                valuesRow[2] = results.GetString(2);
                            if (results[3] != DBNull.Value)
                                valuesRow[3] = results.GetString(3);
                            if (results[4] != DBNull.Value)
                                valuesRow[4] = results.GetInt32(4);
                            if (results[5] != DBNull.Value)
                                valuesRow[5] = results.GetString(5);
                            if (results[6] != DBNull.Value)
                                valuesRow[6] = results.GetString(6);
                            if (results[7] != DBNull.Value)
                                valuesRow[7] = results.GetString(7);
                            if (results[8] != DBNull.Value)
                                valuesRow[8] = results.GetString(8);
                            if (results[9] != DBNull.Value)
                                valuesRow[9] = results.GetString(9);
                            if (results[10] != DBNull.Value)
                                valuesRow[10] = results.GetInt32(10);
                            if (results[11] != DBNull.Value)
                                valuesRow[11] = results.GetString(11);

                            tbl.Rows.Add(valuesRow);
                        }
                        results.Close();
                        break;

                    case "System.Data.SqlClient":
                        cmd.CommandText = fkSQL + WhereClause;
                        cmd.CommandType = CommandType.Text;
                        tbl.Load(cmd.ExecuteReader());
                        break;

                    case "MySql.Data.MySqlClient":
                        cmd.CommandText = fkmySQL + WhereClause;
                        cmd.CommandType = CommandType.Text;
                        tbl.Load(cmd.ExecuteReader());
                        break;

                    default:
                        throw new NotImplementedException("The provider '" + this.ProviderName + "' is not implemented!");
                }
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetStoreProcedures()
        {
            if (Cache.Keys.Contains("StoreProcedures"))
                return Cache["StoreProcedures"];

            DataTable tbl = new DataTable();
            if (this.SupportsMetadataCollection("Procedures"))
                tbl = GetSchema("Procedures");

            Cache.Add("StoreProcedures", tbl);
            return tbl;
        }

        public DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            string CacheKey = "ProcedureParameters:" + (string.IsNullOrEmpty(procedureSchema) ? procedureName : procedureSchema + "." + procedureName);

            string[] restrictions = new string[4] { null, procedureSchema, procedureName, null };
            DataTable tbl = GetSchema("ProcedureParameters", restrictions);

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public string getPropertyType(string SystemType)
        {
            string classType = string.Empty;
            string[] systemType = SystemType.Split('.');
            switch (systemType[1])
            {
                case "String":
                    classType = "string";
                    break;

                case "Boolean":
                    classType = "bool";
                    break;

                case "Byte":
                    classType = "byte";
                    break;

                case "Int16":
                    classType = "short";
                    break;

                case "Int32":
                    classType = "int";
                    break;

                case "Int64":
                    classType = "long";
                    break;

                case "Decimal":
                    classType = "decimal";
                    break;

                case "Guid":
                case "DateTime":
                case "Type":
                    classType = systemType[1];
                    break;

                default:
                    classType = "string";
                    break;
            }

            return classType;
        }

        #endregion

        #region ' Query Resources '

        //
        // SQL Server foreign key support
        //
        const string fkSQL =
            "SELECT" +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME, " +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_CATALOG = KCUC.CONSTRAINT_CATALOG" +
            "		AND RC.CONSTRAINT_SCHEMA = KCUC.CONSTRAINT_SCHEMA" +
            "		AND RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_CATALOG = KCUUC.CONSTRAINT_CATALOG" +
            "		AND RC.UNIQUE_CONSTRAINT_SCHEMA = KCUUC.CONSTRAINT_SCHEMA" +
            "		AND RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        //
        // MySQL foreign key support
        //
        const string fkmySQL =
            "SELECT" +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME," +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (KCUC.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA" +
            "  AND KCUC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME" +
            "  AND KCUC.TABLE_NAME = RC.TABLE_NAME)" +
            "INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (KCUUC.CONSTRAINT_SCHEMA = RC.UNIQUE_CONSTRAINT_SCHEMA" +
            "  AND KCUUC.CONSTRAINT_NAME = RC.UNIQUE_CONSTRAINT_NAME" +
            "  AND KCUUC.TABLE_NAME = RC.REFERENCED_TABLE_NAME)";

        //
        // SQLCE table and foreign key support
        //
        const string tblSQLCE =
            "SELECT * " +
            "FROM INFORMATION_SCHEMA.TABLES";

        const string fkSQLCE =
            "SELECT" +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME, " +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME, " +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION, " +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME, " +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        #endregion
    }

#>
