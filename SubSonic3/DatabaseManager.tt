<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Xml" #>
<#+
// <copyright file="DatabaseManager.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public static class DatabaseManager
{
	public static string ConnectionString;
	public static string ProviderName;
	public static string DatabaseName;
	public static string[] ExcludedTables;
	private static DataTable _DBMetadataCollection = null;
	
    public static DataTable DBMetadataCollection
    {
        get 
        {
			if (_DBMetadataCollection == null)
			{
				using(DbConnection conn = DatabaseManager.GetDBConnection())
				{
					_DBMetadataCollection = conn.GetSchema("MetaDataCollections");
				}			
			}
			return _DBMetadataCollection;
		}
    }
    
    public static bool SupportsMetadataCollection(string metacollection)
    {
		bool supports = false;
		foreach (DataRow metacollectionRow in DatabaseManager.DBMetadataCollection.Rows)
		{
			if (metacollectionRow["CollectionName"].ToString() == metacollection)
			{
				supports = true;
				break;
			}
		}
		
		return supports;
    }
    
	public static DbConnection GetDBConnection(){
		DbProviderFactory providerFactory = DbProviderFactories.GetFactory(DatabaseManager.ProviderName);
		DbConnection conn = providerFactory.CreateConnection();
		conn.ConnectionString = DatabaseManager.ConnectionString;
		conn.Open();
		return conn;
	}
	
	public static DataTable GetSchema(string metaCollection)
	{
		return DatabaseManager.GetSchema(metaCollection, new string[4]);
	}
	
	public static DataTable GetSchema(string metaCollection, string[] restrictions)
	{
		DataTable tbl = null;
		using(DbConnection conn = DatabaseManager.GetDBConnection())
		{
			tbl = conn.GetSchema(metaCollection, restrictions);
		}
		return tbl;
	}

    public static DataTable GetTables()
    {
        return DatabaseManager.GetSchema("Tables");
    }

	public static DataTable GetTableColumns(string tableSchema, string tableName)
	{
		DataTable tbl = new DataTable();
		using(DbConnection conn = DatabaseManager.GetDBConnection())
		{
            DbCommand cmd = conn.CreateCommand();
            switch (DatabaseManager.ProviderName)
            {
				case "System.Data.SqlClient":
					if (!string.IsNullOrEmpty(tableSchema))
						cmd.CommandText = string.Format("SELECT * FROM [{0}].[{1}]", tableSchema, tableName);
					else
						cmd.CommandText = string.Format("SELECT * FROM [{0}]", tableName);
					break;
					
				case "MySql.Data.MySqlClient":
					if (!string.IsNullOrEmpty(tableSchema))
						cmd.CommandText = string.Format("SELECT * FROM `{0}`.`{1}`", tableSchema, tableName);
					else
					cmd.CommandText = string.Format("SELECT * FROM `{0}`", tableName);
					break;
					
				default:
					throw new NotImplementedException("The provider '" + DatabaseManager.ProviderName + "' is not implemented!");
					break;
            }
            
            cmd.CommandType = CommandType.Text;
            tbl = cmd.ExecuteReader(CommandBehavior.KeyInfo).GetSchemaTable();
		}
		return tbl;
	}
	
	public static string GetTablePrimaryKey(string tableSchema, string tableName)
	{
		DataTable tbl = GetTableColumns(tableSchema, tableName);
		string primarykey = "";
		foreach(DataRow columnRow in tbl.Rows){
			bool isPrimaryKey = false;
			if (columnRow["IsKey"] != DBNull.Value)
				isPrimaryKey = (bool)columnRow["IsKey"];

			if (isPrimaryKey)
			{
				primarykey = columnRow["ColumnName"].ToString();
				break;
			}
		}
		return primarykey;
	}
	
	public static DataTable GetTableForeignKeys(string tableSchema, string tableName)
	{
		
		DataTable tbl = new DataTable();
		using(DbConnection conn = DatabaseManager.GetDBConnection())
		{
            DbCommand cmd = conn.CreateCommand();
            switch (DatabaseManager.ProviderName)
            {
				case "System.Data.SqlClient":
				case "MySql.Data.MySqlClient":
					string WhereClause;
					if (!string.IsNullOrEmpty(tableSchema))
						WhereClause = string.Format(" WHERE KCUC.TABLE_SCHEMA = '{0}' AND KCUC.TABLE_NAME = '{1}'", tableSchema, tableName);
					else
						WhereClause = string.Format(" WHERE KCUC.TABLE_NAME = '{0}'", tableName);
					
					cmd.CommandText = fkSQL + WhereClause;						
					break;
				
				default:
					throw new NotImplementedException("The provider '" + DatabaseManager.ProviderName + "' is not implemented!");
					break;
            }
            cmd.CommandType = CommandType.Text;
            tbl.Load(cmd.ExecuteReader());
		}
		return tbl;
	}
    
	public static DataTable GetStoreProcedures()
	{
		DataTable tbl = new DataTable();
		if (DatabaseManager.SupportsMetadataCollection("Procedures"))
			tbl = GetSchema("Procedures");
		
		return tbl;
	}
	
	public static DataTable GetSPParameters(string storeprocedureName)
	{
		string[] restrictions = new string[4] { ProviderName, null, storeprocedureName, null };
		return GetSchema("ProcedureParameters", restrictions);
	}

    public static string GetSysType(string sqlType)
    {
        string sysType = "string";
        switch (sqlType)
        {
            case "bigint":
            case "smallint":
            case "int":
                sysType = "int";
                break;
                
            case "uniqueidentifier":
                sysType = "Guid";
                break;
                
            case "smalldatetime":
            case "datetime":
                sysType = "DateTime";
                break;
                
            case "float":
                sysType = "double";
                break;
                
            case "real":
            case "numeric":
            case "smallmoney":
            case "decimal":
            case "money":
                sysType = "decimal";
                break;
                
            case "bit":
                sysType = "bool";
                break;
                
            case "image":
            case "binary":
            case "tinyint":
            case "varbinary":
                sysType = "byte[]";
                break;
        }
        return sysType;
    }
	
    public static DbType GetDbType(string sqlType)
    {
        switch (sqlType)
        {
            case "varchar":
                return DbType.AnsiString;
            case "nvarchar":
                return DbType.String;
            case "int":
                return DbType.Int32;
            case "uniqueidentifier":
                return DbType.Guid;
            case "datetime":
                return DbType.DateTime;
            case "bigint":
                return DbType.Int64;
            case "binary":
                return DbType.Binary;
            case "bit":
                return DbType.Boolean;
            case "char":
                return DbType.AnsiStringFixedLength;
            case "decimal":
                return DbType.Decimal;
            case "float":
                return DbType.Double;
            case "image":
                return DbType.Binary;
            case "money":
                return DbType.Currency;
            case "nchar":
                return DbType.String;
            case "ntext":
                return DbType.String;
            case "numeric":
                return DbType.Decimal;
            case "real":
                return DbType.Single;
            case "smalldatetime":
                return DbType.DateTime;
            case "smallint":
                return DbType.Int16;
            case "smallmoney":
                return DbType.Currency;
            case "sql_variant":
                return DbType.String;
            case "sysname":
                return DbType.String;
            case "text":
                return DbType.AnsiString;
            case "timestamp":
                return DbType.Binary;
            case "tinyint":
                return DbType.Byte;
            case "varbinary":
                return DbType.Binary;
            default:
                return DbType.AnsiString;
        }
    }
	
    public static string getPropertyType(string SystemType)
    {
        string classType = string.Empty;
        string[] systemType = SystemType.Split('.');
        switch (systemType[1])
        {
            case "String":
                classType = "string";
                break;
			
            case "Boolean":
                classType = "bool";
                break;
			
            case "Byte":
                classType = "byte";
                break;
			
            case "Int16":
                classType = "short";
                break;
			
            case "Int32":
                classType = "int";
                break;
			
            case "Int64":
                classType = "long";
                break;
			
            case "Decimal":
                classType = "decimal";
                break;
			
            case "Guid":
            case "DateTime":
            case "Type":
                classType = systemType[1];
                break;
			
            default:
                classType = "string";
                break;
        }
		
        return classType;
    }

const string fkSQL = 
	"SELECT" +
	"	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
	"	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
	"	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
	"	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
	"	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
	"	KCUC.CONSTRAINT_NAME AS FK_NAME, " +
	"	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
	"	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
	"	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
	"	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
	"	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
	"	KCUUC.CONSTRAINT_NAME AS PK_NAME " +
	"FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
	"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
	"	ON (RC.CONSTRAINT_CATALOG = KCUC.CONSTRAINT_CATALOG" +
	"		AND RC.CONSTRAINT_SCHEMA = KCUC.CONSTRAINT_SCHEMA" +
	"		AND RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
	"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
	"	ON (RC.UNIQUE_CONSTRAINT_CATALOG = KCUUC.CONSTRAINT_CATALOG" +
	"		AND RC.UNIQUE_CONSTRAINT_SCHEMA = KCUUC.CONSTRAINT_SCHEMA" +
	"		AND RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

const string fkmySQL =
	"SELECT" +
	"	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
	"	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
	"	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
	"	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
	"	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
	"	KCUC.CONSTRAINT_NAME AS FK_NAME," +
	"	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
	"	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
	"	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
	"	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
	"	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
	"	KCUUC.CONSTRAINT_NAME AS PK_NAME " +
	"FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
	"INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
	"	ON (KCUC.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA" +
	"  AND KCUC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME" +
	"  AND KCUC.TABLE_NAME = RC.TABLE_NAME)" +
	"INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
	"	ON (KCUUC.CONSTRAINT_SCHEMA = RC.UNIQUE_CONSTRAINT_SCHEMA" +
	"  AND KCUUC.CONSTRAINT_NAME = RC.UNIQUE_CONSTRAINT_NAME" +
	"  AND KCUUC.TABLE_NAME = RC.REFERENCED_TABLE_NAME)";
	
}
#>
