<#+
// <copyright file="SubSonicStructs.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class SubSonicStructs : Template
{
    private string _Namespace;
    private DataTable _Tables;
	
    public string Namespace
    {
        get { return _Namespace; }
        set { _Namespace = value; }
    }
	
    public DataTable Tables
    {
        get { return _Tables; }
        set { _Tables = value; }
    }
	
	protected override void RenderCore()
	{
#>
using System;

namespace <#=this.Namespace #>
{
<#+
		foreach(DataRow tableRow in this.Tables.Rows)
		{
			string rawTableName = tableRow[2].ToString();
			string tableName = Utilities.CleanUp(rawTableName);
			//!DatabaseManager.ExcludedTables.Contains(
			if(rawTableName != "sysdiagrams" && tableRow[3].ToString() == "BASE TABLE")
			{
				string[] restrictions = new string[4]{ tableRow[0].ToString(), null, rawTableName, null };
				DataTable columns = DatabaseManager.GetTableColumns(rawTableName);
#>
	public struct <#=tableName #>Table
	{
<#+
				foreach(DataRow columnRow in columns.Rows)
				{
					string colName = columnRow["ColumnName"].ToString();
#>
		public static string <#=colName #> = "<#=colName #>";
<#+		
				}
#>
	}
	
<#+			}
		} #>
}
<#+
	}
}
#>