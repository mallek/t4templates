<#@ assembly name="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="SubSonic3\DatabaseManager.tt" #>
<#@ include file="SubSonic3\Inflector.tt" #>
<#@ include file="SubSonic3\SettingsManager.tt" #>
<#@ include file="SubSonic3\SubSonicClasses.tt" #>
<#@ include file="SubSonic3\SubsonicQuerySurface.tt" #>
<#@ include file="SubSonic3\SubSonicRepository.tt" #>
<#@ include file="SubSonic3\SubSonicStoreProcedures.tt" #>
<#@ include file="SubSonic3\SubSonicStructs.tt" #>
<#+
// <copyright file="SubSonicGenerator.tt" company="George J. Capnias">
//  Copyright © . All Rights Reserved.
// </copyright>

public static class Utilities
{
	public static string CleanUp(string propertyToFilter){
        string propertyName = string.Empty;
        string[] nameParts = propertyToFilter.Replace(' ', '_').Split('_');
		
        foreach (string namePart in nameParts)
        {
            propertyName += namePart.Substring(0, 1).ToUpper() + namePart.Substring(1);
        }
		
        if (string.IsNullOrEmpty(propertyName))
            throw new Exception("Cannot fix the property name!");
		
        return propertyName;
	}
	
	public static string CleanNullOrEmpty(object propertyToFilter)
	{
		string propertyValue = null;
		if (propertyToFilter != DBNull.Value)
		{
			if (!string.IsNullOrEmpty(propertyToFilter.ToString()))
				propertyValue = propertyToFilter.ToString();
		}
		
		return propertyValue;
	}

}

public class SubSonicGenerator : Generator
{
    private string _Namespace;
    private string _ConnectionString;
    private string _ProviderName;
    private string _Database;
    private DataSet dbschema = new DataSet("Schema");
    
    public string Namespace
    {
        get { return _Namespace; }
        set { _Namespace = value; }
    }
	
    public string ConnectionString
    {
        get { return _ConnectionString; }
        set { _ConnectionString = value; }
    }

    public string ProviderName
    {
        get { return _ProviderName; }
        set { _ProviderName = value; }
    }
	
    public string Database
    {
        get { return _Database; }
        set { _Database = value; }
    }
	
	protected override void RunCore()
	{
		// Table classes
		DataTable tables = DatabaseManager.GetTables();
		foreach(DataRow tableRow in tables.Rows){
			string tableSchema = Utilities.CleanNullOrEmpty(tableRow["TABLE_SCHEMA"]);
			string tableNameRaw = tableRow["TABLE_NAME"].ToString();
			string tableName = Utilities.CleanUp(tableNameRaw);
			string tableType = tableRow["TABLE_TYPE"].ToString().ToUpper();
			
			if(!DatabaseManager.ExcludedTables.Contains(tableNameRaw) && (tableType == "BASE TABLE" || tableType == "TABLE"))
			{
				DataTable columns = DatabaseManager.GetTableColumns(tableSchema, tableNameRaw);
				string pk = DatabaseManager.GetTablePrimaryKey(tableSchema, tableNameRaw);
				DataTable foreignKeys = DatabaseManager.GetTableForeignKeys(tableSchema, tableNameRaw);
				
				SubSonicClass classTemplate = new SubSonicClass();
				classTemplate.Namespace = this.Namespace;
				classTemplate.TableSchema = tableSchema;
				classTemplate.TableNameRaw = tableNameRaw;
				classTemplate.TableName = tableName;
				classTemplate.Columns = columns;
				classTemplate.ForeignKeys = foreignKeys;
				classTemplate.RenderToFile(tableSchema + "." + tableName + ".cs");
			}
		}
		// QuerySurface class
		SubsonicQuerySurface querysurfaceTemplate = new SubsonicQuerySurface();
		querysurfaceTemplate.Namespace = this.Namespace;
		querysurfaceTemplate.Tables = tables;
		querysurfaceTemplate.RenderToFile("QuerySurface.cs");
		
		// Repository class
		SubSonicRepository repositoryTemplate = new SubSonicRepository();
		repositoryTemplate.Namespace = this.Namespace;
		repositoryTemplate.RenderToFile("Repository.cs");
		
		// StoreProcedures class
		SubSonicStoreProcedures proceduresTemplate = new SubSonicStoreProcedures();
		proceduresTemplate.Namespace = this.Namespace;
		proceduresTemplate.StoredProcedures = DatabaseManager.GetStoreProcedures();
		proceduresTemplate.RenderToFile("StoreProcedures.cs");
		
		// SubSonicStructs class
		SubSonicStructs structsTemplate = new SubSonicStructs();
		structsTemplate.Namespace = this.Namespace;
		structsTemplate.Tables = tables;
		structsTemplate.RenderToFile("Structs.cs");
	}
}
#>